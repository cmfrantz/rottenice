# -*- coding: utf-8 -*-
"""
Created on Mon Jul 14 14:06:19 2025

@author: cariefrantz
@project: RottenIce

CREATES AN EXCEL FILE CONTAINING SORTED, FORMATTED ASV AND TAXONOMY TABLES
This script imports ASV and taxonomy tables generated in QIIME2 and formats
them for publication by sorting them by sample and taxonomy and producing
normalized versions of the count tables.

This script was created as part of the Rotten Ice Project.


Arguments:  None

Requirements:      
    ASV tables (tsv) for the datasets to format
        where rows = ASVs, columns = sample names
        the first header row contains '# Constructed from biom file'
        the second header row contains the column headers
        this file is generated by adding taxonomy metadata to a QIIME2
        ASV feature table
        
    OTU tables (csv) for the datasets to format
        where rows = sample names, columns = taxonomic calls + metadata
        the header row is the first row
        this file is generated by exporting a level 7 (L7) csv from a
        QIIME2 barplot qzv visualization
        

Example in command line:
    python formatASVtable.py

Dependencies Install:
    pip install pandas
    pip install xlsxwriter

You will also need to have the following files
    in the same directory as this script.
They contain modules and variables that this script calls.
    RottenIceModules.py
    RottenIceVars.py
If you get an error indicating that one of these modules is not found,
    change the working directory to the directory containing these files.

Copyright (C) 2025  Carie M. Frantz

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>
"""

####################
# IMPORTS
####################
import pandas as pd

import RottenIceModules


####################
# VARIABLES
####################

# The list of tables to sort
dsetlist = {
    '16S noUEMC QC'     : '16S',
    '18S noUBA QC'      : '18S'
    }

# Sort the samples by Month - Fraction - Template - Replicate
sampleorder = RottenIceModules.genSampleListCS()
template_order = ['cDNA','DNA']
replicates = [1,2,3]

toptaxa = 20 # Top ranked taxa to number


####################
# FUNCTIONS
####################
def sortTable(table, col_order, sort_row):
    '''
    Sorts the feature table columns by an ordered list, and rows alphabetically

    Parameters
    ----------
    table : pandas.DataFrame
        The table to be sorted.
    col_order : list of str
        Ordered list of column names--this defines the column sort order.
    sort_row : str
        The name of the column to sort rows by.

    Returns
    -------
    table_reordered : pandas.DataFrame
        The sorted table.

    '''
    table_reordered = table.copy()
    table_reordered = table_reordered.sort_values(sort_row)
    table_reordered = table_reordered[col_order]
    return table_reordered


def normalizeTable(table, datacols):
    '''
    Normalizes values in a table so that the sum of the columns = 1

    Parameters
    ----------
    table : pandas.DataFrame
        The table to normalize.
    datacols : list of str
        The columns that contain numerical data to normalize.

    Returns
    -------
    table_normalized : pandas.DataFrame
        The normalized table.

    '''
    table_normalized = table.copy()
    sums = table_normalized[datacols].sum(axis = 0)
    table_normalized[datacols] = table_normalized[datacols].div(
        sums, axis='columns')
    return table_normalized

#%%
####################
# MAIN FUNCTION
####################

for ds in dsetlist:
    
    # Read in the exported ASV tables
    filename, directory, asv_table = RottenIceModules.fileGet(
        'Select ' + ds + ' ASV table (BIOM export format)',
        tabletype = 'ASV-table-fromBIOM')
    filename, directory, otu_table = RottenIceModules.fileGet(
        'Select ' + ds + ' L7 OTU table (from barplot export)',
        tabletype = 'OTU-table')
    
    
    # Generate the sorted sample names
    gene = dsetlist[ds]
    samplelist = []
    for sample in sampleorder:
        for t in template_order:
            for r in replicates:
                samplelist.append(sample + '-' + str(r) + '.' + gene + '-' + t)
    
    # Sort and normalize the ASV table
    samplecols = [s for s in samplelist if s in asv_table.columns]
    columns = ['taxonomy', 'OTUID'] + samplecols
    asv_table_reordered = asv_table.copy()
    asv_table_reordered.insert(0,'OTUID',asv_table_reordered.index)
    asv_sorted = sortTable(asv_table_reordered, columns, 'taxonomy')
    asv_normed = normalizeTable(asv_sorted, samplecols)
    
    # Sort and normalize the OTU table
    otu_trimmed = otu_table[[col for col in otu_table.columns if 'd__' in col]]
    otu_table_T = otu_trimmed.T
    samplecols = [s for s in samplelist if s in otu_table_T.columns]
    otu_table_reordered = otu_table_T.copy()
    otu_table_reordered.insert(0,'taxonomy',otu_table_reordered.index)
    columns = ['taxonomy'] + samplecols
    otu_sorted = sortTable(otu_table_reordered, columns, 'taxonomy')
    otu_normed = normalizeTable(otu_sorted, samplecols)
    
    # Calculate average relative abundance and rank taxa
    otu_ranked = otu_normed.copy()
    otu_ranked['avg'] = otu_ranked[samplecols].mean(axis=1) # calculate the average abundance
    otu_ranked.sort_values('avg', ascending=False, inplace=True)
    for i in range(toptaxa):    # Add the rankings to the top most abundant
        otu_ranked.at[otu_ranked.index[i],'rank'] = i+1
    col_order = ['taxonomy','rank','avg'] + samplecols
    otu_ranked = otu_ranked[col_order] # Sort the columns appropriately
        
    # Save to Excel file
    with pd.ExcelWriter(filename[:-4] + '_formatted.xlsx', engine='xlsxwriter') as writer:
        asv_sorted.to_excel(writer, sheet_name = 'ASV counts', index = False)
        asv_normed.to_excel(writer, sheet_name = 'ASV normalized', index = False)
        otu_sorted.to_excel(writer, sheet_name = 'Tax counts', index = False)
        otu_normed.to_excel(writer, sheet_name = 'Tax normalized', index = False)
        otu_ranked.to_excel(writer, sheet_name = 'Tax ranked', index = False)
        
