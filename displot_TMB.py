# -*- coding: utf-8 -*-
"""
Created on Thu Jul 10 12:20:39 2025

@author: cariefrantz
@project: RottenIce

GENERATES BOX-AND-WHISKER PLOTS COMPARING COMMUNITY DISTANCES BETWEEN
SAMPLE SETS AT DIFFERENT CORE DEPTHS

This script generates box-and-whisker plots comparing top-middle / top-bottom /
middle-bottom whole-core melt samples in each month in order to assess whether
or not vertical homogenization of the communities occurred.

This script was created as part of the Rotten Ice Project

Arguments:  None

Requirements:   
    Distance matrices (tsv)
        where rows = samples, columns = samples
        data are the weighted unifrac community distances generated by
        exporting the QIIME2 distance matrix file:
            qiime tools export \
                --input-path weighted_unifrac_distance_matrix.qza
                --output-path directory/export

Example in command line:
    python displot_TMB.py

Dependencies Install:
    sudo apt-get install python3-pip python3-dev
    pip install numpy
    pip install pandas
    pip install matplotlib


Copyright (C) 2025  Carie M. Frantz

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>
"""

####################
# IMPORTS
####################
import os

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
from matplotlib.patches import Patch

import RottenIceModules


####################
# VARIABLES
####################
datasets = {
    '16S H+SW cDNA'                     : {'gene'   : '16S-cDNA'},
    '18S H+SW cDNA'                     : {'gene'   : '18S-cDNA'},
    '18S Primary Producers H+SW cDNA'   : {'gene'   : '18S-cDNA'}
    }


comparisons = {
    'T->M'   : ['T','M'],
    'M->B'   : ['M','B'],
    'T->B'   : ['T','B']
    }

fraction = 'H'
gene = 'cDNA'

monthmap = {
    'M-CS'     : 'May',
    'JN-CS'    : 'June',
    'JY10'  : 'July - dirty floe',
    'JY11'  : 'July - clean floe'
    }

replicates = [1,2,3]

colorset = ['#4F9CC8','#9DBED4','#ECEFF8']

# Plot sizing
pltht = 3
pltw = 5
x_pos_range = np.arange(len(comparisons)) / (len(comparisons) - 1)
x_pos = (x_pos_range * 0.5) + 0.75

#%%

####################
# MAIN FUNCTION
####################

if __name__ == '__main__':
    
   # Load files
   directory = os.getcwd()
   
   for file in datasets:
       # Load distance matrix
       filename, directory, distance_matrix = RottenIceModules.fileGet(
           'Select ' + file + ' distance matrix file', directory = directory,
           file_type = 'tsv', header_row = 0, index_col = 0)
       
       # Generate sets of distances
       distsets = {}
       
       # Loop through each month and comparison
       for comparison in comparisons:
           compset = {}
           
           for month in monthmap:
               # Generate sample names in the set to analyze
               sampleset1 = month + '-' + fraction + comparisons[comparison][0]
               samplelist1 = [s for s in distance_matrix.index
                              if sampleset1 in str(s)]
               
               sampleset2 = month + '-' + fraction + comparisons[comparison][1]
               samplelist2 = [s for s in distance_matrix.index
                              if sampleset2 in str(s)]
               
               # Get the distances
               distances = []
               for s1 in samplelist1:
                   for s2 in samplelist2:
                       distances.append(distance_matrix.loc[s1,s2])
                       
               compset[month] = distances
               
           distsets[comparison] = compset
       
       # Set up plot
       ax = plt.axes()
       
       # Calculate and plot each set
       for i, comparison in enumerate(distsets):
           bp = ax.boxplot(
               list(distsets[comparison].values()),
               widths = 0.6 / len(distsets),
               labels = list(distsets[comparison]),
               patch_artist = True,
               positions = [x_pos[i] + j * 1 for j in range(len(list(monthmap)))]
               )
           
           for box in bp['boxes']:
               box.set(facecolor = colorset[i])
           
           plt.setp(bp['medians'], color='black')
       
       # Format the plot
       ax.set(
           title = 'Community distances between different core depths - ' + file,
           ylabel = 'Weighted Unifrac Distance'
           )
       
       
       # Remove the major x-axis tickmarks
       ax.tick_params(axis='x', bottom=False)
       # Positions of the x-axis labels
       xticks = ax.set_xticks(np.arange(len(list(monthmap))) + 1)
       # Positions of the minor x-axis tickmarks
       xticks = ax.set_xticks(np.arange(len(list(monthmap)) + 1) + 0.5, minor=True)
       # Change the limits of the x-axis
       xlim = ax.set_xlim([0.5, len(list(monthmap)) + 0.5])
       
       
       # Add legend
       legend_elements = []
       for i, comparison in enumerate(distsets):
           legend_elements.append(Patch(facecolor = colorset[i], label = comparison))
       
       ax.legend(
           handles = legend_elements, loc = 'upper left',
           bbox_to_anchor=(1.02, 1)
           )
        
       plt.show()